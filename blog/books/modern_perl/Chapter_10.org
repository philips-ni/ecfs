* 超越语法

之前的章节仅仅是介绍了一些基本的Perl知识，这显然是不够的．有经验的Perl程序员往往会很自如地将Perl的各种特性组合在一起，并使用一些模式和习惯用法．

好了，现在到了学习Perl的第二个阶段: 像Perl原住民（Perlish) 一样思考．这样会使你写的Perl代码更精炼，强大以及更Perlish :)

** 习惯用法(Idioms)

每一门语言，不管是编程语言或者是自然语言都有一些习惯的表达方式和用法.　例如地球在旋转，而我们却称之为日出或日落．

We brag about clever hacks and cringe at nasty hacks as we sling code.

Perl的习惯用法并不是语言的特性或者设计技巧．他们其实是一种机制和写代码的方式，这样写会让你看起来更有Perlish的腔调．

你当然可以不这样使用，但是在很多地方他们表现了Perl的强大．

*** 用$self代表对象实例

Perl 5的对象系统（Moose),把方法的调用者(invocant)当作一个默认的参数．无论你是调用一个类方法或者实例方法，@_的第一个元素总是这个方法的调用者.

习惯上，大多数Perl 5代码都使用$class来表达类方法调用者，而用$self表示实例方法的调用者．

这种习惯的强大之处在于，许多像MooseX::Method::Signatur这样的有用的扩展会假设你会使用$self作为实例方法的调用者．


*** 命名参数

列表处理是Perl执行表达式的基本组件，而Perl允许使用变长参数列表则给程序员带来了许多方便．
然而不仅仅是这样，Perl还允许程序员把参数成对的传入，换言之，Perl支持这样形式的命名参数及函数调用：

#+begin_src perl
    make_ice_cream_sundae(
	whipped_cream => 1,
	sprinkles => 1,
	bannana => 1,
	ice_cream => 'mint chocolate chip',
    );
#+end_src
让我们来看如何实现这样的支持命名参数的函数：

#+begin_src perl
    sub make_ice_cream_sundae
    {
	my %args = @_;
	my $dessert = get_ice_cream( $args{ice_cream} );
	.....
    }
#+end_src
这种技术在可以在定义import()的时候使用，这样你就可以处理按Hash的方式的处理任意多的参数了．请看：
#+begin_src perl
　　sub import
    {
	my ($class, %args) = @_;
	my $calling_package = caller();
	....
    }
#+end_src

*** Schewartizian 变换

用 Schewartizian　变换作为例子可以很好的展示Perl从Lisp那里借鉴到的对列表处理的习惯用法．

假设你有一个Perl Hash，它关系着你的合作者以及他们的电话分机号：

#+begin_src perl
	my %extensions =
	(
	    '001' => 'Armon',
	    '002' => 'Wesley',
	    '003' => 'Gerald',
	    '005' => 'Rudy',
	    '007' => 'Brandon',
	    '008' => 'Patrick',
	    '011' => 'Luke',
	    '012' => 'Lamarcus',
	    '017' => 'Chris',
	    '020' => 'Maurice',
	    '023' => 'Marcus',
	    '024' => 'Andre',
	    '052' => 'Greg',
	    '088' => 'Nic',
	);
#+end_src

先对名字按字母序排序：

#+begin_src perl
	my @sorted_names = sort values %extensions;
#+end_src	    

对于 Schewartizian变换而言，还需要维护名字及分机号的关系．

#+begin_src perl
	my @pairs = map { [ $_, $extensions{$_} ] } keys %extensions;
#+end_src

最后再把他们用名字排序

#+begin_src perl
	my @sort_pairs = sort { $a->[1] cmp $b->[1] } @pairs;
#+end_src

在sort 代码块里出现的$a和$b看上去有些奇怪，其实他们是两个包变量．它们分别代表每次从@pairs取出的相邻的两个元素.

我们可以把@short_paris转换成一个更可读的形式：

#+begin_src perl
	my @formatted_exts = map { "$_->[1], ext. $_->[0]" } @sort_pairs;
#+end_src

这样你就可以把所有的信息输出了:

#+begin_src perl
	say for @formatted_exts;
#+end_src

让我们整理一下，把所有的动作合并到一起，这样我们就可以这样来实现Schwartzian变换：

#+begin_src perl
	say for
	   map { " $_[1], ext. $_[0]" }
	   sort { $a->[1] cmp $b->[1] }
	   map { [ $_ => $extensions{$_} ]  }
	kyes %extensions;
#+end_src
    
*** 读取文件所有内容到一个标量

在使用Perl 5的全局变量的时候, local关键字至关重要．要正确的使用local关键字,你需要先理解scope的概念．
而scope有tight和lightweight之分，下面这个例子，展示了几种把一个文件的全部内容读入到一个标量的方法．

#+begin_src perl
	my $file = do { local $/ = <$fh> };

        # or

        my $file = do { local $/, <$fh> };

        # or

        my $file; { local $/, $file =  <$fh> };
#+end_src


$/ 是输入记录分隔符, 将其localizing ( local $/), 会首先将它设置为undef（将undef作为分隔符的意思就是读入整个内容而毋须分隔）．

让我们来看第一个例子，local $/ 发生在 $/ = <$fh> 之前，于是文件内所有内容都会读入到 $/,　因为do block会整个block求值，然后返回其最后一个表达式的值，这样$/的值就被赋给$file.

第二个例子其实基本上与第一个例子相同，只是没有把文件内容赋值给$/.

第三个例子看上去繁琐了些，但是却少了第二次赋值(在读文件的时候就直接赋值给了$file)，因此它是这三个里面最高效的．


    
*** 使用Main函数

Perl无须使用特别的语法来创建闭包(closure), 你可能在不经意间就对某个词法变量创建了闭包．
许多程序常常创建很多文件级的词法变量，这样一来就可以在函数里面直接使用了，而无须把它们当作参数传进去．
但是这样会带来一个问题，随着程序变得越来越大，某个变量有可能在你使用的时候并没有初始化, 而且很难察觉到这一点．

为了避免上述问题，一个好的建议是：

　- 把你所有的主程序封装到main()
  - 不使用文件级的词法变量
　- 在你use了所有的模块或pragmas后，加入一行　exit main( @ARGV );

#+begin_src perl
	#!/usr/bin/perl
	use Modern::Perl
	....
	exit main( @ARGV );
#+end_src

在程序的一开始就调用main(),会迫使你显式地做好所有的初始化工作，以及处理好各种编译顺序．
将exit与main()结合在一起使用可以阻止其它bare code(在所有函数之外的code)被调用．
请注意,　在你实现main()的时候在成功执行的时候一定要记各返回0.

    
*** 可控的对Perl模块的执行

一个Perl模块和一个Perl程序在使用时存在明显的差异，用户可以执行Perl程序, 而只能在程序中加载Perl模块．
然而，程序和模块其实都是Perl代码, 让一个模块可以直接被执行其实很简单．同样的，让一个程序可以像一个模块被加载也不难．（这一点往往在对这个程序进行单元测试时很有用）．
你需要做的只是需要理解Perl解释器是如何执行一段代码的．

caller的一个可选参数是call frames的个数，例如caller(0)会返回当前call frame的信息．为了让一个Perl文件既可以像程序一样被执行，或者像模块一样被加载，只需要做到以下两点：

　 - 把主程序放到main()
   - 在use了所有的模块或pragmas后，加入一行:

#+begin_src perl
exit main()　unless caller(0);
#+end_src

如果是直接执行该程序（perl path/to/Module.pm) ，caller(0)会返回０，如果是在程序中加载这个模块(use Module)，则caller(0)返回１．


*** 后缀式(Postfix)参数验证

CPAN 上有好些模块可以用来帮助进行函数参数的验证, 其中较好的两个是Params::Validate和MooseX::Params::Validate．
基本上, 对于一些简单的参数验证甚至都不需要使用这些模块．

假设你的函数有两个参数, 你可以这样来进行验证:

#+begin_src perl
	use Carp 'croak'
	sub groom_monkeys
	{
	    if ( @_ != 2 ) {
		croak 'Grooming requires two monkeys!';
	    }
	    ...
	}
#+end_src

从语言学层面来说,结果比检查更重要，所以这样写会显得重点更突出．

#+begin_src perl
	    croak 'Grooming requires two monkeys!'　if @_ != 2;
#+end_src

或者这样写，可读性更强：

#+begin_src perl
	    croak 'Grooming requires two monkeys!'　unless @_ == 2;
#+end_src

使用这种尽早返回的技巧，特别是这种后缀式单行条件语句来进行参数验证, 可以使剩下的代码更加清晰和简捷．

	
*** Regex En Passant

许多Perl习惯用法都依赖于对表达式进行求值，例如：

#+begin_src perl
	    say my $ext_num = my $extension = 42;
#+end_src

上述代码并不是一个好例子，只是要用它来表明一个表达式的值可以被用到别一个表达式里．这并不是什么新东西, 以下这两个用法我相信你之前一定用过：
　　- 在列表里使用函数的返回值　（　my @array = ( 1, sum(1,2) ); )
　　- 把一个函数的返回值作为别一个函数的参数 ( sum(1,max(1,3); )

假设你想从姓名里把'名'提取出来，你可以这样：

#+begin_src perl
    my ( $first_name ) = $name =~ /($first_name_rx)/;
#+end_src


在列表上下文里，一次成功的正则匹配会返回一个列表，列表里面会包括所有捕获到的匹配．

如果要修改这个名字，例如移除掉所有的非字母字符，可以这样：

#+begin_src perl
　　my $name = "philips_ni";
    ( my $normalized_name = $name ) =~ tr/A-Za-z//dc;
#+end_src

首先把$name赋值给$normalized_name,(因为括号的优先级比'=~'高),　然后再对 $normalized_name　进行'tr'操作.
    - 'c'指使用SET1(/A-Za-z/)的补充形式，即不匹配/A-Za-Z/的一切字符．
　　- 'd' 指删除匹配SET1的字符
　　- 这样tr操作就会把所有不匹配/A-Za-Z/的字符全部删掉．
　  - 最后 $name的值仍是"philips_ni", 而 $normalized_name会值则变为"philipsni"

这种技巧也可以用到别的支持即时修改(in-place modification)的操作符:

#+begin_src perl
my $age = 14;
(my $next_age = $age)++;
say "Next year I will be $next_age";
#+end_src


*** 强制转型(Unary Coercions)

在你选择了正确的操作符之后, Perl5的自动型别系统基本上总是能够很好的识别和处理需要操作的数据.　
在使用'.'(字符串连接符)的时候，Perl会自动地把两边的数据按字符串处理．
在使用'+'时，Perl会自动地把两边的数据按数字处理．

但有时，你可能不得不对你的数据进行强制转型，这样可以告诉Perl按你希望的方式来对数据进行处理．

为了确保Perl把一个值当成一个数字，可以做'加零'操作.

#+begin_src perl
my $numberic_value = 0 + $value;
#+end_src
为了确保Perl把一个值当成布尔量，可以做'双重否定'操作．

#+begin_src perl
my $boolean_value = !! $value;
#+end_src
为了确保Perl把一个值当成字符串，可以做'连接到空串'操作．

#+begin_src perl
my $string_value = '' . $value;
#+end_src

基本上需要用到强制转型的地方很少，但是当你看到上述用法，你应该知道这些习惯用法意味着什么．
例如，当你看到一些像这样的代码的时候：　
#+begin_src perl
　'userless' + 0；
#+end_src

在你移除他们之前，请仔细思考一下，移除他们会不会让整个代码不能运行．


** 全局变量

Perl 5提供了好些*超级全局变量*,它们是真正全局性,没有局限于某个包或者某个文件.
不幸的是, 它们全局可见的特性意味着你无法控制它们在程序中你无法控制的地方被修改.
几乎没有人会把它们全部都记得,即使是很有经验的Perl程序员也只会记得它们中的一部份.
事实上直接在工作中用得着的全局变量屈指可数.
perldoc perlvar对全局变量进行了很详细的介绍.

*** 正确使用全局变量

全局变量并不是什么好东西, 其实Per5已经在把减少全局变量方面已经取得很好的进展, 相信将来还会进一步减少.
所以你应该尽可能的避免使用全局变量.
但是当你不得不使用全局变量的时候, 请首先使用local, 这样可以让你把对该变量的修改限制在一个最小的范围里.

就像之前那个把文件内容一次读到一个标量里的那个例子:

#+begin_src perl
my $file; { local $/; $file = <$fh> };
#+end_src

这样把$/设为undef的这个改动就被局限在这个{}里了.

另外,在读取全局变量的时候,我们应该尽早把它拷贝到一个本地变量, 以防后续操作会修改了该全局变量.
(这个时候, 读取到了的全局变量的值有可以就不是我们想要的.)

以下是捕获异常的的习惯用法:

#+begin_src perl
local $@;
eval { ... };
if ( my $exceptions = $@ ) {
   doSomething();
   showException( $exception );
}
#+end_src

要点就是,在eval之后, 马上把全局变量 $@ 拷贝给 $exception, 这样我们就不用担心doSometing()会有可能修改$@了.

另外,关于异常处理, 也可以试试 Try:: Tiny.


*** English 模块

Perl 全局变量看上去都很奇怪,很难懂.
Enblish 模块提供了更长更有意义的全局变量的别名, 你可以这样使用:

#+begin_src perl
use English '-no_match_vars';
#+end_src


例如, 有三个正则表达式相关的全局变量( $&, $`, $' ), 看上去很晦涩难懂, 会很影响整个程序的可读性.
而在我们使用了English模块后, 我们就可以使用${^MATCH}, ${^PREMATCH}, ${^POSTMATCH}, 这样就好懂很多了:)

更多详情, 请参考:  perldoc perlvar

*** 常用的全局变量

基本上, 在Perl 5的程序中需要用到的全局变量并不多, 只需要知道以下这些就够了.

  - $/(或者 $INPUT_RECORD_SEPARATOR), 它主要用于指定每次从文件句柄读入数据时要用到的终止符, 它可以是零或者多个字符. 
    默认情况下, 它被设为你所在平台的换行符.
    如果你把它设为undef,会一次把所有数据全部读入. 
    如果你把它设为指向一个整数的引用, Perl就会试着读取你指定长度的字节(就注意,如果你的数据是Unicode, 这可能会有些问题).
    如果你把它设置为空串'', Perl会一次读入一个段落.(段落是指一段文本后面跟着连续好几个换行符).
   

  - $.($INPUT_LINE_NUMBER), 会保存你最近从文件句柄读取的记录数. 你可以读取这个变量,但是对这个变量赋值是没有意义的
  
  - $!($OUTPUT_AUTOFLUSH), 这主要用于控制是否把数据直接刷入要写的文件,或者是等到写入缓冲区满了再刷入要写的文件. 
    请注意, 无缓冲的输出常常在把数据写入管道, 套接字(Socket)或者无须等待输入的终端时很有用. 这个变量会把赋给它的值都当成布尔值看待.
  
  - @ARGV, 它包含要传给程序的命令行参数.

  - $!($ERRNO), 这是一个dualvar, 它保存了最近系统调用的结果. 
    在数字上下文环境里, 它会对应于C程序里的 errno 值, (一切非0值,都会认为出错).
    在字符串上下文环境里, 它会对应于相应的错误消息.
    在进行系统调用(注意很多Perl buildin 函数会隐含地调用系统调用)前,对其本地化(localize)可以有效的阻止,该系统调用对全局$!产生影响, 与此同时,在进行系统调用后,应立即把$!的值转存到其它变量, 以防后续的操作会修改$!的值.

  - $"($LIST_SEPARATOR), 这是一个用于将在输出一个列表时在该列表每个元素间插入一个分隔符. 基缺省值是一个空格.

  - %+ 是一个用于保存那些成功匹配命名捕获(named capture)的那些值
 
  - $@($EVAL_ERROR)保存最近捕获到的异常的值

  - $0($PROGRAM_NAME) 保存着当前程序的命字,在类Unix平台上,你可以改变这个值,这样这个被你修改过的值就会作为该程序的名字,出现在ps或top的输出中.

  - $$($PID) 保存当前运行程序的进程ID, 请注意,在多进程或者多线程的程序里, 不同进程或者线程它们的PID各不相同.

  - @INC, Perl 在加载(use 或者 require)模块时,会从@INC指定的列表里查找相应的模块文件, 详情请见 perldoc -f require.

  - %SIG ,这个全局哈希表维护着操作系统及Perl底层信号与信号处理函数之间的映射. 例如，通过捕捉INT信号,可以截获CTRL+ C. 详情请见perldoc perlipc.


*** 全局变量的小贴式及替代品

在使用全局变量的时候，最容易出问题的地方是I/O及异常处理. 
使用Try::Tiny，它可以帮助你很好地进行异常处理，而又不会陷入使用全局变量$@的麻烦中.
将$!本地化，并及时拷贝其值到其它变量，会帮助你避免某些Perl函数隐式地调用系统调用而带来的关于$!的奇怪行为.
在词法变量句柄(lexical filehandles)上使用IO::File会帮你避免不必要的对IO行为的全局性改变.





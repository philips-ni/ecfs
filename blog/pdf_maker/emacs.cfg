(setq default-frame-alist      '( 
                                 (top . 000) (left . 0) 
                                 (width . 90) (height . 40)      
                                 (cursor-color . "#dddddd") 
                                 (foreground-color . "green") 
                                 (background-color . "black") 
                                 (vertical-scroll-bars . right) 
                                 ) 
      )

(windmove-default-keybindings)
(require 'autoinsert) 
;; set htmlize
(require 'htmlize)
;;(require 'htmlize-hack)
(auto-insert-mode)  
(setq auto-insert-directory "~/.mytemplates/") 
(setq auto-insert-query nil) 
(define-auto-insert "\.pl" "my-pl-template") 
(define-auto-insert "\.txt" "my-txt-template") 
(define-auto-insert "\.gui" "my-gui-template") 
(define-auto-insert "\.sfs" "my-sfs50-template") 
(define-auto-insert "\.sfsn" "my-sfs55-template") 
(define-auto-insert "\.vis" "my-vis-template") 
(add-to-list 'load-path "~/.emacs.d/pde")
(load "pde-load")

(setq visible-bell t) 

(autoload 'kill-ring-search "kill-ring-search"
  "Search the kill ring in the minibuffer."
  (interactive))

(global-set-key "\M-\C-y" 'kill-ring-search)
(require 'browse-kill-ring)
(global-set-key [(control c)(k)] 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

(require 'package)
(add-to-list 'package-archives
             '("marmalade" .
               "http://marmalade-repo.org/packages/"))
(package-initialize)

(setq inhibit-startup-message t)
;;(menu-bar-mode -1) 
(defun match-paren (arg) 
  "Go to the matching parenthesis if on parenthesis otherwise insert %."
  (interactive "p") 
  (cond ((looking-at "\\s\(") 
	 (forward-list 1) (backward-char 1))        
	((looking-at "\\s\)") (forward-char 1) (backward-list 1))       
	(t (self-insert-command (or arg 1)))
	)
  )

(defun looking-back (regexp &optional limit &rest ignored)
  (save-excursion
    (re-search-backward (concat "\\(?:" regexp "\\)\\=") limit t))
  )

(defun looking-forward (regexp &optional limit &rest ignored)
  (save-excursion
    (re-search-forward (concat "\\(?:" regexp "\\)\\=") limit t))
  )
(setq load-path
      (append load-path
              '("/usr/share/emacs/site-lisp/nxml/")))
;;--
;; Make sure nxml-mode can autoload
;;
(load "/usr/share/emacs/site-lisp/nxml/rng-auto.el")

;;--
;; Load nxml-mode for files ending in .xml, .xsl, .rng, .xhtml
;;--
(setq auto-mode-alist
      (cons '("\\.\\(xml\\|xsl\\|rng\\|xhtml\\)\\'" . nxml-mode)
            auto-mode-alist))


(add-to-list 'load-path "/usr/share/emacs/site-lisp/muse/")

(require 'muse-mode)			; load authoring mode

(require 'muse-html)			; load publishing styles I use
(require 'muse-latex)
(require 'muse-texinfo)
(require 'muse-docbook)
(require 'muse-project)			; publish files in projects
(setq muse-project-alist
      '(("website" ("/home/fni/new_git/fni-utilities/fwiki" 
 		    :fource-publish ("WikiIndex")
 		    :default "index")
	 (:base "my-xhtml" :path "~/public_html")
	 (:base "pdf" :path "~/public_html/pdf"))))

(setq fei-style-sheet
      (concat "<link rel=\"stylesheet\" type=\"text/css\""
	      " charset=\"utf-8\" media=\"all\""
	      " href=\"http://~/gitbase/fwiki/css/fei2.css\" />"))
(setq wiki-header 
      " <?xml version=\"1.0\" encoding=\"utf-8\"?>
 <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
 <html>
 
   <head>
     <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">
     <meta name=\"Generator\" content=\"Emacs Muse\">
     <meta name=\"Keywords\" content=\"<lisp>
     (concat (muse-publishing-directive \"keywords\")
     \",GNU,Linux,YLinux,Kernel,,Linux,C,Emacs,Python\")
     </lisp>\">
     <meta name=\"Description\" content=\"Fei --Linux\">
     <meta name=\"Author\" content=\"Fei\">
     <meta name=\"Robots\" content=\"index\">
     <link rel=\"stylesheet\" type=\"text/css\" charset=\"utf-8\" media=\"all\" href=\"fei2.css\">
     <title><lisp>
   (concat (muse-publishing-directive \"title\")
           (let ((author (muse-publishing-directive \"author\")))
             (if (not (string= author (user-full-name)))
                 (concat \" (by \" author \")\"))))</lisp></title>
   </head>
   
   <body>
 
     <div class=\"menu\">
       <table border='0'>
       <td><a title=\"Back to home\" href=\"/\">Back to home</a></td>
       <td><a title=\"Search\" href=\"http://10.180.94.151/search/search.php\">Search</a></td>
       </table>
     </div>
 
     <div id=\"header\">
       <h1 align=\"center\"><lisp>
         (muse-publishing-directive \"title\")
       </lisp></h1>
 
 
     </div>
 
     <div id=\"main\">
 <!-- Emacs Muse Begin-->"
      )

(setq wiki-footer
      "<!-- Emacs Muse End-->
       </div>
 
       <div id=\"footer\">
       <div id=\"copyright\">
       &copy ; 2011 <a href=\"mailto:philips.ni.fei@gmail.com\">by Philips Ni</a>
       </div>
       <div id=\"footdate\">
       Latest update <lisp>(muse-publishing-directive \"date\")</lisp>
       </div>
       </div>
 
       </body>
       </html>"
      )

(muse-derive-style "my-xhtml" "xhtml"
		   :header wiki-header
		   :footer wiki-footer
		   :style-sheet fei-style-sheet)

(grep-compute-defaults)
(grep-apply-setting 'grep-find-command "find . ! -name \"*~\" ! -name \"#*#\" ! -name \"*#*\" ! -name 'TAGS' -type f -print0 | xargs -0 -e grep -nH -e ")

					; (set-terminal-coding-system 'chinese-iso-8bit)
					; (set-keyboard-coding-system 'chinese-iso-8bit)
					; (set-language-environment 'chinese-gb)
					; (set-clipboard-coding-system 'chinese-iso-8bit)
					; (set-selection-coding-system 'chinese-iso-8bit)
					; (setq locale-coding-system 'chinese-iso-8bit)
					; (setq current-language-environment "Chinese-GB")
					; 
;; Meta
(global-set-key "\M-m" 'set-mark-command)
(global-set-key "\M-=" 'find-tag)
(global-set-key "\M-\C-h" 'backward-kill-word)
(global-set-key "\M-\C-r" 'query-replace)
(global-set-key "\M-r" 'replace-regexp)
(global-set-key "\M-g" 'goto-line)

(global-set-key "\M-n" 'vi-open-next-line)

(global-set-key "\M-l" 'copy-line)
;; (global-set-key "\M-c" 'hippie-expand)
(global-set-key "\M-p" 'copy-paragraph)
(global-set-key "\M-h" 'help-command)
(global-set-key "\M-i" 'ispell-complete-word)
(global-set-key "\M-c" 'kill-ring-save)

(global-set-key (kbd "C-c <up>") 'windmove-up)  
(global-set-key (kbd "C-c <down>") 'windmove-down)
(global-set-key (kbd "C-c <left>") 'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)



;; (global-set-key "\M-<up>" 'windmove-up) 
;; (global-set-key "\M-<left>" 'windmove-left) 
;; (global-set-key "\M-<right>" 'windmove-right) 
;; ;;
;; ;; Function keys
(global-set-key [f1] 'manual-entry)
(global-set-key [f2] 'hide-body)
(global-set-key [f3] 'show-all)
(global-set-key [f4] 'replace-regexp)
(global-set-key [f5] 'eval-current-buffer)
(global-set-key [f6] 'copy-word)
(global-set-key [f7] 'nf-copy-symbol)
(global-set-key [f8] 'grep-find)
(global-set-key [f9] 'save-buffer)
;;(global-set-key [f10] 'next-error)
(global-set-key [f11] 'compile)
(global-set-key [f12] 'next-error)
(global-set-key [C-f1] 'compile)
(global-set-key [C-f2] 'grep)
(global-set-key [C-f3] 'next-error)
(global-set-key [C-f4] 'previous-error)
(global-set-key [C-f5] 'display-faces)
(global-set-key [C-f9] 'dired)
(global-set-key [C-f10] 'kill-compilation)


(global-set-key "\C-cn" 'nf-copy-symbol)
(global-set-key "\C-cl" 'linum-mode)
(global-set-key "\C-cf" 'find-grep)
(global-set-key "\C-co" 'occur)
(global-set-key "\C-ct" 'line-to-top-of-window)
(global-set-key "\C-x\C-b" 'buffer-menu)
(global-set-key "\C-ci" 'magit-status)

(global-font-lock-mode t)
(add-hook 'c-mode-hook 'linux-c-mode)
(add-hook 'c++-mode-hook 'linux-cpp-mode)
;; ÉèÖÃimenuµÄÅÅÐò·½Ê½Îª°´Ãû³ÆÅÅÐò
(setq imenu-sort-function 'imenu--sort-by-name)
(defun linux-c-mode() 
  ;; ½«»Ø³µ´úÌæC-jµÄ¹¦ÄÜ£¬»»ÐÐµÄÍ¬Ê±¶ÔÆë
  (define-key c-mode-map [return] 'newline-and-indent)
  (interactive) 
  ;; ÉèÖÃC³ÌÐòµÄ¶ÔÆë·ç¸ñ
  (c-set-style "K&R") 
  ;; ×Ô¶¯Ä£Ê½£¬ÔÚ´ËÖÖÄ£Ê½ÏÂµ±Äã¼üÈë{Ê±£¬»á×Ô¶¯¸ù¾ÝÄãÉèÖÃµÄ¶ÔÆë·ç¸ñ¶ÔÆë
  (c-toggle-auto-state 1)
  ;; ´ËÄ£Ê½ÏÂ£¬µ±°´BackspaceÊ±»áÉ¾³ý×î¶àµÄ¿Õ¸ñ
  (c-toggle-hungry-state)
  ;; TAB¼üµÄ¿í¶ÈÉèÖÃÎª4
  (setq c-basic-offset 8)
  ;; ÔÚ²Ëµ¥ÖÐ¼ÓÈëµ±Ç°BufferµÄº¯ÊýË÷Òý
  (imenu-add-menubar-index)
  ;; ÔÚ×´Ì¬ÌõÉÏÏÔÊ¾µ±Ç°¹â±êÔÚÄÄ¸öº¯ÊýÌåÄÚ²¿
  (which-function-mode) 
  ) 
(defun linux-cpp-mode() 
  (define-key c++-mode-map [return] 'newline-and-indent)
  (define-key c++-mode-map [(control c) (c)] 'compile)
  ;;  (define-key c++-mode-map [({)] 'new-brace-binding)
  (interactive) 
  (c-set-style "K&R") 
  (c-toggle-auto-state 1)
  (c-toggle-hungry-state)
  (setq c-basic-offset 4)
  (imenu-add-menubar-index)
  (which-function-mode)
  )

(defun new-brace-binding()
  (interactive)
  (self-insert-command 1)
  (newline-and-indent)
  )

(defun vi-open-next-line (arg) 
  "Move to the next line (like vi) and then opens a line."  
  (interactive "p")  
  (end-of-line)  
  (open-line arg)  
  (next-line 1)  
  (indent-according-to-mode)
  )

(modify-coding-system-alist 'process "*" 'euc-cn)
(setq default-process-coding-system 
      '(euc-cn . euc-cn))
(setq-default pathname-coding-system 'euc-cn)

(setq visible-bell t)
(display-time)
(column-number-mode t)
(transient-mark-mode t)
(show-paren-mode t)
(setq-default make-backup-files nil)
(mouse-avoidance-mode 'animate)	;;ÈÃÊó±ê²»Òªµ²×¡¹â±ê
;; ÉèÖÃÏÔÊ¾Ê±¼ä
(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)

;;;;; Esay Edit for C++/C programming
;; TAB and RET auto align and indent
(add-hook 'c++-mode-hook
	  (lambda ()
	    (c-set-style "K&R")
	    (hs-minor-mode)
	    (local-set-key "\C-c\t" 'complete-symbol)
	    (local-set-key "\C-m" 'newline-and-indent)
	    (setq mslk-c++-key (make-keymap))
	    (local-set-key "\C-j" mslk-c++-key)
	    (define-key mslk-c++-key "\C-j" 'complete-symbol)
	    (define-key mslk-c++-key "\C-o" 'hs-hide-all)
	    (define-key mslk-c++-key "\C-p" 'hs-show-all)
	    (define-key mslk-c++-key "\C-h" 'hs-hide-block)
	    (define-key mslk-c++-key "\C-u" 'hs-show-block)
	    (define-key mslk-c++-key "\C-l" 'hs-hide-level)
	    (define-key mslk-c++-key "\C-m" 'hs-toggle-hiding)
	    ))
(require 'cc-mode)
(add-hook 'c-mode-hook 'c++-mode)
(defun my-indent-or-complete ()
  (interactive)
  (if (looking-at "\\>")
      (hippie-expand nil)
    (indent-for-tab-command)))
(add-hook 'c-mode-common-hook
	  (function (lambda ()
		      (define-key c-mode-base-map [(tab)] 'my-indent-or-complete)
		      (define-key c-mode-base-map [(control m)] 'align-newline-and-indent)
		      (c-toggle-auto-state 1))))

'(set-scroll-bar-mode nil)    ; no scroll bar, even in x-window system
(load-file "/usr/share/emacs/site-lisp/xcscope.el")
(require 'xcscope)
(load-file "/usr/share/emacs/site-lisp/erlang.el")
(require 'erlang-start)
(load-file "/usr/share/emacs/site-lisp/graphviz-dot-mode.el")
(load-file "/usr/share/emacs/site-lisp/javascript.el")
(autoload 'javascript-mode "javascript" nil t)
(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
(global-set-key [(meta ?/)] 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
	try-expand-dabbrev-visible
	try-expand-dabbrev-all-buffers
	try-expand-dabbrev-from-kill
	try-complete-file-name-partially
	try-complete-file-name
	try-expand-all-abbrevs
	try-expand-list
	try-expand-line
	try-complete-lisp-symbol-partially
	try-complete-lisp-symbol))


;;support python
(setq load-path (cons "/usr/share/emacs/site-lisp/python-mode-1.0" load-path))
(setq auto-mode-alist
      (cons '("\\.py$" . python-mode) auto-mode-alist))
(setq interpreter-mode-alist
      (cons '("python" . python-mode)
	    interpreter-mode-alist))
(autoload 'python-mode "python-mode" "Python editing mode." t)
(setq font-lock-maximum-decoration t)
(load-library "rdebug")
;;support ruby
(setq load-path (cons "/usr/share/emacs/site-lisp" load-path))
(autoload 'ruby-mode "ruby-mode" "Major mode for editing ruby scripts." t)
(setq auto-mode-alist (cons '("\\.rb$" . ruby-mode) auto-mode-alist))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode)) interpreter-mode-alist))
(setq load-path (append load-path '("X"))) 

;;support perl
;; Use cperl-mode instead of the default perl-mode
					;(add-to-list 'auto-mode-alist '("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode))
					;(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
					;(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
					;(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))
					;(add-hook 'cperl-mode-hook 'n-cperl-mode-hook t)
					;(defun n-cperl-mode-hook ()
					;  (setq cperl-indent-level 4)
					;  (setq cperl-continued-statement-offset 0)
					;  (setq cperl-extra-newline-before-brace t)
					;  (set-face-background 'cperl-array-face "wheat")
					;  (set-face-background 'cperl-hash-face "wheat")
					;)

;; cperl-mode is preferred to perl-mode                                        
(defalias 'perl-mode 'cperl-mode)
(add-hook 'cperl-mode-hook 'pde-perl-mode-hook)
(add-hook 'cperl-mode-hook 
	  (lambda () 
	    (define-key cperl-mode-map (kbd "C-h f") 'cperl-perldoc) 
	    (define-key cperl-mode-map "\C-m" 'newline-and-indent)
            (define-key cperl-mode-map "\C-\M-i" 'perltidy-region) 
	    (setq cperl-invalid-face nil) 
	    (setq cperl-electric-parens nil) 
	    (setq cperl-electric-keywords nil) 
	    (setq cperl-indent-level 2) 
	    (define-key cperl-mode-map (kbd "C-h (") ;......... 
	      (lambda () "toggle electric parens" 
		(interactive) 
		(toggle-variable 'cperl-electric-parens))) 
	    (define-key cperl-mode-map (kbd "C-h )") 
	      (lambda () "toggle electric keywords" 
		(interactive) 
		(toggle-variable 'cperl-electric-keywords))) 
	    )) 

(defun pde-perl-mode-hook ()
  (abbrev-mode t)
  (add-to-list 'cperl-style-alist
               '("PDE"
                 (cperl-auto-newline                         . t)
                 (cperl-brace-offset                         . 0)
                 (cperl-close-paren-offset                   . -2)
                 (cperl-continued-brace-offset               . 0)
                 (cperl-continued-statement-offset           . 2)
                 (cperl-extra-newline-before-brace           . nil)
                 (cperl-extra-newline-before-brace-multiline . nil)
                 (cperl-indent-level                         . 2)
                 (cperl-indent-parens-as-block               . t)
                 (cperl-label-offset                         . -2)
                 (cperl-merge-trailing-else                  . t)
                 (cperl-tab-always-indent                    . t)))
  (cperl-set-style "PDE"))

(add-hook 'gdb-mode-hook 
	  (lambda () 
	    (setq gdb-many-windows 't)	;....... 
	    (define-key gud-mode-map [f9] 'gdb-many-windows) 
	    ;;(setq gdb-use-separate-io-buffer 't) 
	    ;;(tool-bar-mode 't) 
	    )) 



;;support copy line,word and paragraph
(defun copy-line (&optional arg)
  "Save current line into Kill-Ring without mark the line"
  (interactive "P")
  (let ((beg (line-beginning-position)) 
	(end (line-end-position arg)))
    (copy-region-as-kill beg end))
  )

(defun copy-word (&optional arg)
  "Copy words at point"
  (interactive "P")
  (let ((beg (progn (backward-word 1) (point))) 
	(end (progn (forward-word 1) (point))))
    (copy-region-as-kill beg end)
    )
  )


(defun copy-paragraph (&optional arg)
  "Copy paragraphes at point"
  (interactive "P")
  (let ((beg (progn (backward-paragraph 1) (point))) 
	(end (progn (forward-paragraph arg) (point))))
    (copy-region-as-kill beg end))
  )

(defun nf-copy-symbol (&optional arg)
  "Copy words at point  "
  (interactive "P")
  (let ((beg (progn (nf-backward-symbol) (point))) 
	(end (progn (nf-forward-symbol) (point))))
    (copy-region-as-kill beg end)
    )
  )

(defun nf-backward-symbol ()
  "Backward a word seperated by space"
  (interactive )
					;  (re-search-backward   "[ \t\n\(\{\[\$\<\/\"]\\w+")
  (re-search-backward   "[^a-z0-9A-Z_\-]")
  (forward-char)
  )

(defun nf-forward-symbol ()
  "forward a word seperated by space"
  (interactive)
  (re-search-forward  "[a-z0-9A-Z_\-]+" )
  (point)
  )

;;; enables outlining for ruby
;;; You may also want to bind hide-body, hide-subtree, show-substree,
;;; show-all, show-children, ... to some keys easy folding and unfolding
(add-hook 'ruby-mode-hook
	  '(lambda ()
	     (outline-minor-mode)
	     (setq outline-regexp " *\\(def \\|class\\|module\\)")))

(add-hook 'sh-mode-hook
	  '(lambda ()
	     (outline-minor-mode)
	     (setq outline-regexp " *function")))

(add-hook 'cperl-mode-hook
	  '(lambda ()
	     (outline-minor-mode)
	     (setq outline-regexp " *sub")))

(put 'upcase-region 'disabled nil)

;; (when (fboundp 'windmove-default-keybindings)
;;   (windmove-default-keybindings))


(defun wrap-src-markup (str start end)
  (interactive "sPlease enter a language name: \nr")
  ;;  (save-excursion 
  (let ((open_tag (concat "<src lang=\"" str "\">\n")))  
    (goto-char end) (insert "\n</src>\n")
    (goto-char start) (insert open_tag)
    (goto-char (+ end 26))
    ))

(defun wrap-org-src (str start end)
  (interactive "sPlease enter a language name: \nr")
  ;;  (save-excursion 
  (let ((open_tag (concat "#+begin_src " str "\n")))  
    (goto-char end) (insert "\n#+end_src\n")
    (goto-char start) (insert open_tag)
    (goto-char (+ end 26))
    ))

(defun init-etag-table(dir)
  (interactive "sPlease enter a dir name: \n")
  
  (let ( 
        (cmd_str (concat "find " dir " \\( -name '*.sh' -o -name '*.p[lm]' \\) | etags -" ))
        ;; ( cmd_str "ls -alh" )
        )
    (message "cmd: %s" cmd_str)
    (call-process-shell-command cmd_str nil t)
    ))

(defun line-to-top-of-window ()
  "Move the line point is on to top of window."
  (interactive)
  (recenter 0))


(defun query-friend-name (x)
  "…"
  (interactive "sEnter friend's name: ")
  (message "Name: %s" x)
  )

(require 'org)
(require 'org-install)
(require 'ob-ditaa)
(require 'org-latex)
(require 'ob-tangle)
(require 'ox-latex)
;; (setq org-latex-to-pdf-process
;;       '("xelatex -interaction nonstopmode %f"
;;         "xelatex -interaction nonstopmode %f")) ;; for multiple passes
;;

;; Let the exporter use the -shell-escape option to let latex
;; execute external programs.
;; This obviously and can be dangerous to activate!
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))


(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             ;; beamer class, for presentations
             '("beamer"
               "\\documentclass[11pt]{beamer}\n
\\usepackage{fontspec}\n
\\usepackage{xeCJK}\n
\\setCJKmainfont[Mapping=tex-text]{WenQuanYi Micro Hei}\n
\\setCJKmonofont[Mapping=tex-text]{SimSun}\n
\\setmainfont[Mapping=tex-text]{TeXGyrePagella}\n
\\setmonofont[Mapping=tex-text]{Courier 10 Pitch}\n
\\setsansfont[Mapping=tex-text]{SimSun}\n
\\usetheme[pageofpages=of,% String used between the current page and the
  % total page count.
  alternativetitlepage=true,% Use the fancy title page.
  titlepagelogo=logo-telekinesis,% Logo for the first page.
]{PaloAlto} \n
\\usecolortheme{wolverine}\n
      \\beamertemplateballitem\n
      \\setbeameroption{show notes}
      \\usepackage[utf8]{inputenc}\n
      \\usepackage[T1]{fontenc}\n
      \\usepackage{hyperref}\n
      \\usepackage{color}
      \\usepackage{listings}
      \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
  frame=single,
  basicstyle=\\small,
  showspaces=false,showstringspaces=false,
  showtabs=false,
  keywordstyle=\\color{blue}\\bfseries,
  commentstyle=\\color{red},
  }\n
      \\usepackage{verbatim}\n
      \\institute{feiphilips\\_ni@symantec.com}\n          
       \\subject{{{{beamersubject}}}}\n"

               ("\\section{%s}" . "\\section*{%s}")
               
               ("\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}"
                "\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}")))

;; letter class, for formal letters

(add-to-list 'org-export-latex-classes
             '("letter"
               "\\documentclass[11pt]{letter}\n
      \\usepackage[utf8]{inputenc}\n
      \\usepackage[T1]{fontenc}\n
      \\usepackage{color}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; 使用xelatex一步生成PDF
(setq org-latex-to-pdf-process
      '("xelatex -interaction nonstopmode %f"
        "xelatex -interaction nonstopmode %f"))

(defun org-mode-article-modes ()
  (reftex-mode t)
  (and (buffer-file-name)
       (file-exists-p (buffer-file-name))
       (reftex-parse-all)))

(add-hook 'org-mode-hook
          (lambda ()
            (if (member "REFTEX" org-todo-keywords-1)
                (org-mode-article-modes))))

(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
             '("cn-article"
               "\\documentclass[10pt,a4paper]{article}
\\usepackage{graphicx}
\\usepackage{xcolor}
\\usepackage{xeCJK}
\\usepackage{lmodern}
\\usepackage{verbatim}
\\usepackage{fixltx2e}
\\usepackage{longtable}
\\usepackage{float}
\\usepackage{tikz}
\\usepackage{wrapfig}
\\usepackage{soul}
\\usepackage{textcomp}
\\usepackage{listings}
\\usepackage{geometry}
\\usepackage{algorithm}
\\usepackage{algorithmic}
\\usepackage{marvosym}
\\usepackage{wasysym}
\\usepackage{latexsym}
\\usepackage{natbib}
\\usepackage{fancyhdr}
\\usepackage[xetex,colorlinks=true,CJKbookmarks=true,
linkcolor=blue,
urlcolor=blue,
menucolor=blue]{hyperref}
\\defaultfontfeatures{Mapping=tex-text}
\\usepackage{fontspec,xunicode,xltxtra}
\\setCJKmainfont{WenQuanYi Zen Hei}   % 设置缺省中文字体
\\setmainfont{Gentium} 
\\setsansfont[BoldFont=WenQuanYi Zen Hei Sharp]{AR PL UKai CN}
\\setmonofont{Ubuntu Mono}
\\newcommand\\fontnamemono{WenQuanYi Micro Hei} %等宽字体
\\newfontinstance\\MONO{\\fontnamemono}
\\newcommand{\\mono}[1]{{\\MONO #1}}
\\hypersetup{unicode=true}
\\geometry{a4paper, textwidth=6.5in, textheight=10in,
marginparsep=7pt, marginparwidth=.6in}
\\definecolor{foreground}{RGB}{220,220,204}%浅灰
\\definecolor{background}{RGB}{62,62,62}%浅黑
\\definecolor{preprocess}{RGB}{250,187,249}%浅紫
\\definecolor{var}{RGB}{239,224,174}%浅肉色
\\definecolor{string}{RGB}{154,150,230}%浅紫色
\\definecolor{type}{RGB}{225,225,116}%浅黄
\\definecolor{function}{RGB}{140,206,211}%浅天蓝
\\definecolor{keyword}{RGB}{239,224,174}%浅肉色
\\definecolor{comment}{RGB}{180,98,4}%深褐色
\\definecolor{doc}{RGB}{175,215,175}%浅铅绿
\\definecolor{comdil}{RGB}{111,128,111}%深灰
\\definecolor{constant}{RGB}{220,162,170}%粉红
\\definecolor{buildin}{RGB}{127,159,127}%深铅绿
\\punctstyle{kaiming}
\\title{}
\\fancyfoot[C]{\\bfseries\\thepage}
\\chead{\\MakeUppercase\\sectionmark}
\\pagestyle{fancy}
\\tolerance=1000
[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]"
("\\section{%s}" . "\\section*{%s}")
("\\subsection{%s}" . "\\subsection*{%s}")
("\\subsubsection{%s}" . "\\subsubsection*{%s}")
("\\paragraph{%s}" . "\\paragraph*{%s}")
("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

;; 使用Listings宏包格式化源代码(只是把代码框用listing环境框起来，还需要额外的设置)
(setq org-export-latex-listings t)
;; Options for \lset command（reference to listing Manual)
(setq org-export-latex-listings-options
      '(
        ("basicstyle" "\\color{foreground}\\small\\mono")           ; 源代码字体样式
        ("keywordstyle" "\\color{function}\\bfseries\\small\\mono") ; 关键词字体样式
        ("identifierstyle" "\\color{doc}\\small\\mono")
        ("commentstyle" "\\color{comment}\\small\\itshape")         ; 批注样式
        ("stringstyle" "\\color{string}\\small")                    ; 字符串样式
        ("showstringspaces" "false")                                ; 字符串空格显示
        ("numbers" "left")                                          ; 行号显示
        ("numberstyle" "\\color{preprocess}")                       ; 行号样式
        ("stepnumber" "1")                                          ; 行号递增
        ("backgroundcolor" "\\color{background}")                   ; 代码框背景色
        ("tabsize" "4")                                             ; TAB等效空格数
        ("captionpos" "t")                                          ; 标题位置 top or buttom(t|b)
        ("breaklines" "true")                                       ; 自动断行
        ("breakatwhitespace" "true")                                ; 只在空格分行
        ("showspaces" "false")                                      ; 显示空格
        ("columns" "flexible")                                      ; 列样式
        ("frame" "single")                                          ; 代码框：阴影盒
        ("frameround" "tttt")                                       ; 代码框： 圆角
        ("framesep" "0pt")
        ("framerule" "8pt")
        ("rulecolor" "\\color{background}")
        ("fillcolor" "\\color{white}")
        ("rulesepcolor" "\\color{comdil}")
        ("framexleftmargin" "10mm")
        ))
;; Make Org use ido-completing-read for most of its completing prompts.
(setq org-completion-use-ido t)
;; 各种Babel语言支持
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (emacs-lisp . t)
   (matlab . t)
   (C . t)
   (perl . t)
   (sh . t)
   (ditaa . t)
   (python . t)
   (haskell . t)
   (dot . t)
   (latex . t)
   (js . t)
   ))

;; 导出Beamer的设置
;; allow for export=>beamer by placing #+LaTeX_CLASS: beamer in org files
;;-----------------------------------------------------------------------------
(add-to-list 'org-latex-classes
             ;; beamer class, for presentations
             '("beamer2"
               "\\documentclass[11pt,professionalfonts]{beamer}
\\usetheme{PaloAlto} \n
\\usecolortheme{wolverine}\n
\\beamertemplateballitem
\\setbeameroption{show notes}
\\usepackage{graphicx}
\\usepackage{tikz}
\\usepackage{xcolor}
\\usepackage{xeCJK}
\\usepackage{amsmath}
\\usepackage{lmodern}
\\usepackage{fontspec,xunicode,xltxtra}
\\usepackage{polyglossia}
\\setmainfont{Ubuntu}
\\usepackage{verbatim}
\\usepackage{listings}
\\institute{{{{beamerinstitute}}}}
\\subject{{{{beamersubject}}}}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}"
                "\\begin{frame}[fragile]\\frametitle{%s}"
                "\\end{frame}")))

(setq ps-paper-type 'a4
      ps-font-size 16.0
      ps-print-header nil
      ps-landscape-mode nil)

